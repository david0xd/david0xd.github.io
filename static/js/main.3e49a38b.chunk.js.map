{"version":3,"sources":["util/DocumentSignerService.js","components/AddDocumentByHash.js","components/ManageDocument.js","components/SignDocument.js","components/GetDocument.js","components/About.js","App.js","getWeb3.js","serviceWorker.js","index.js"],"names":["DocumentSignerService","web3","contract","accounts","pollTransaction","interval","maxAttempts","transactionHash","console","log","attempts","waitForTransactionToComplete","resolve","reject","a","eth","getTransactionReceipt","result","Error","setTimeout","Promise","this","documentHash","documentName","documentDescription","documentHashingAlgorithm","methods","addDocument","send","from","signDocument","address","fullName","description","amountToBePaidInETH","amountToBePaidInWei","utils","toWei","toString","addSignatory","value","documents","call","getSignatories","signatoryAddress","getSignatoryInformation","getSignatures","getAccounts","accountsUsed","AddDocumentByHash","props","state","documentAdded","lastTransactionHash","transactionInProgress","showError","errorMessage","documentSignerService","addDocumentHash","e","preventDefault","setState","setInterval","message","handleChange","bind","data","target","name","className","Alert","variant","href","rel","Form","onSubmit","Group","controlId","Label","Control","type","placeholder","onChange","Text","Select","Button","disabled","Component","ManageDocument","signatoryName","signatoryDescription","amountToBePaid","documentActionSuccessful","onClick","SignDocument","allowedToSign","signatories","getAccountAddress","currentAccount","includes","getDocument","GetDocument","documentOwner","documentTimestamp","documentSignatories","documentSignatures","documentRetrieved","signatoriesRetrieved","signaturesRetrieved","documentDoesNotExist","document","owner","dateFormatted","getFormattedDateFromTimestamp","createdAt","algorithm","signatoriesWithInfo","signatory","signatoryInfo","fromWei","push","signedAt","paid","signatures","showSignatories","indexKey","map","s","key","showSignatures","find","timestamp","dateCreated","Date","time","getHours","getMinutes","toLocaleDateString","Table","striped","bordered","hover","length","About","App","pages","currentPage","componentDidMount","connect","handleNavChange","React","createRef","manageDocument","about","connectingWithButton","window","ethereum","Web3","enable","provider","providers","HttpProvider","addEventListener","instance","Contract","DocumentSignerContract","abi","contractAddress","options","on","accountChanged","alert","error","current","isConnected","Container","fluid","src","alt","Nav","Item","Link","ref","size","connectWithButton","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3e49a38b.chunk.js","sourcesContent":["/**\n * Use this service to wrap up web3 calls to the smart contract.\n * */\nexport class DocumentSignerService {\n\n    web3 = null;\n    contract = null;\n    accounts = [];\n\n    constructor(web3, contract, accounts) {\n        this.web3 = web3;\n        this.contract = contract;\n        this.accounts = accounts;\n    }\n\n    async addDocument(documentHash, documentName, documentDescription, documentHashingAlgorithm) {\n        return await this.contract.methods.addDocument(\n            documentHash,\n            documentName,\n            documentDescription,\n            documentHashingAlgorithm\n        ).send({ from: this.accounts[0] });\n    }\n\n    async signDocument(documentHash) {\n        return await this.contract.methods.signDocument(\n            documentHash\n        ).send({ from: this.accounts[0] });\n    }\n\n    async addSignatory(documentHash, address, fullName, description, amountToBePaidInETH) {\n        // Handle amount to be paid\n        const amountToBePaidInWei = this.web3.utils.toWei(amountToBePaidInETH.toString(), 'ether');\n        console.log(amountToBePaidInWei);\n\n        return await this.contract.methods.addSignatory(\n            documentHash,\n            address,\n            fullName,\n            description\n        ).send({ from: this.accounts[0], value: amountToBePaidInWei });\n    }\n\n    async getDocument(documentHash) {\n        return await this.contract.methods.documents(documentHash).call();\n    }\n\n    async getSignatories(documentHash) {\n        return await this.contract.methods.getSignatories(documentHash).call();\n    }\n\n    async getSignatoryInformation(documentHash, signatoryAddress) {\n        return await this.contract.methods.getSignatoryInformation(documentHash, signatoryAddress).call();\n    }\n\n    async getSignatures(documentHash) {\n        return await this.contract.methods.getSignatures(documentHash).call();\n    }\n\n    async getAccountAddress() {\n        const accountsUsed = await this.web3.eth.getAccounts();\n        this.accounts = accountsUsed;\n        return accountsUsed[0];\n    }\n\n    async accountChanged() {\n        const accountsUsed = await this.web3.eth.getAccounts();\n        this.accounts = accountsUsed;\n        return accountsUsed[0];\n    }\n\n    pollTransaction = ({ interval, maxAttempts, transactionHash }) => {\n        console.log('Start transaction polling...');\n        let attempts = 0;\n\n        const waitForTransactionToComplete = async (resolve, reject) => {\n            console.log('- transaction poll');\n            const result = await this.web3.eth.getTransactionReceipt(transactionHash)\n            attempts++;\n\n            if (result !== null) {\n                return resolve(result);\n            } else if (maxAttempts && attempts === maxAttempts) {\n                return reject(new Error('Exceeded max number of attempts for transaction polling'));\n            } else {\n                setTimeout(waitForTransactionToComplete, interval, resolve, reject);\n            }\n        };\n\n        return new Promise(waitForTransactionToComplete);\n    };\n}\n","import React, { Component } from \"react\";\nimport { Alert, Button, Form } from \"react-bootstrap\";\n\nexport class AddDocumentByHash extends Component {\n    state = {\n        documentHash: '',\n        documentName: '',\n        documentDescription: '',\n        documentHashingAlgorithm: 'SHA-256',\n        documentAdded: false,\n        lastTransactionHash: '',\n        transactionInProgress: false,\n        showError: false,\n        errorMessage: '',\n    };\n    documentSignerService = null;\n\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.documentSignerService = props.data.documentSignerService;\n    }\n\n    handleChange(e) {\n        this.setState({[e.target.name]: e.target.value});\n    }\n\n    addDocumentHash = async (e) => {\n        e.preventDefault();\n        const {documentHash, documentName, documentDescription, documentHashingAlgorithm} = this.state;\n\n        try {\n            this.setState({\n                transactionInProgress: true,\n                showError: false,\n                errorMessage: ''\n            })\n\n            const result = await this.documentSignerService.addDocument(\n                documentHash,\n                documentName,\n                documentDescription,\n                documentHashingAlgorithm\n            );\n\n            this.setState({\n                documentAdded: true,\n                documentHash: '',\n                documentName: '',\n                documentDescription: '',\n                lastTransactionHash: result.transactionHash,\n                transactionInProgress: false\n            })\n            setInterval(() => {\n                this.setState({\n                    documentAdded: false\n                })\n            }, 9000)\n        } catch (error) {\n            console.log(error);\n            const errorMessage = error.message;\n            this.setState({\n                showError: true,\n                errorMessage: errorMessage,\n                transactionInProgress: false\n            })\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"d-flex justify-content-center align-content-center align-items-center flex-column\">\n                <Alert variant={\"info\"}>\n                    <p>\n                        You can use some of the online tools to hash your document like&nbsp;\n                        <a href=\"https://md5file.com/calculator\" target=\"_blank\" rel=\"noreferrer\">this one</a> or&nbsp;\n                        <a href=\"https://emn178.github.io/online-tools/keccak_256_checksum.html\"\n                           target=\"_blank\"\n                           rel=\"noreferrer\"\n                        >this one</a> or you can use&nbsp;\n                        <a href=\"https://www.npmjs.com/package/hash-files\"\n                           target=\"_blank\"\n                           rel=\"noreferrer\"\n                        >NPM package</a>.\n                    </p>\n                </Alert>\n                {this.state.transactionInProgress === true ?\n                    (<Alert variant={\"success\"}>\n                        You successfully initiated a transaction for adding document hash!<br />\n                        Confirm the transaction in your wallet and wait to complete.\n                    </Alert>) : null\n                }\n                {this.state.documentAdded === true ?\n                    (<Alert variant={\"success\"}>\n                        Transaction confirmed! Document hash successfully added.\n                        <p>Transaction hash: { this.state.lastTransactionHash }</p>\n                    </Alert>) : null\n                }\n                {this.state.showError === true ?\n                    (<Alert variant={\"danger\"}>\n                        <h6>Error occurred while trying to add new document hash.</h6>\n                        <p>{this.state.errorMessage}</p>\n                    </Alert>) : null\n                }\n                <Form className=\"mt-2\" onSubmit={this.addDocumentHash}>\n                    <Form.Group className=\"mb-3\" controlId=\"formDocumentHash\">\n                        <Form.Label>Document hash</Form.Label>\n                        <Form.Control type=\"text\"\n                                      placeholder=\"Paste your document hash here\"\n                                      name=\"documentHash\"\n                                      value={this.state.documentHash}\n                                      onChange={this.handleChange}\n                        />\n                        <Form.Text className=\"text-custom-info\">\n                            Advice: Use SHA256 algorithm to hash your documents!\n                        </Form.Text>\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\" controlId=\"formDocumentName\">\n                        <Form.Label>Document name</Form.Label>\n                        <Form.Control type=\"text\"\n                                      placeholder=\"Add name of your document here\"\n                                      name=\"documentName\"\n                                      value={this.state.documentName}\n                                      onChange={this.handleChange}\n                        />\n                        <Form.Text className=\"text-custom-info\">\n                            Adding document name is recommended since it's stored on-chain and can\n                            help you identify and manage your documents later.\n                        </Form.Text>\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\" controlId=\"formDocumentDescription\">\n                        <Form.Label>Document name</Form.Label>\n                        <Form.Control type=\"text\"\n                                      placeholder=\"Add description of your document here\"\n                                      name=\"documentDescription\"\n                                      value={this.state.documentDescription}\n                                      onChange={this.handleChange}\n                        />\n                        <Form.Text className=\"text-custom-info\">\n                            Optionally, add description of your document.\n                        </Form.Text>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Algorithm used</Form.Label>\n                        <Form.Select aria-label=\"Hashing algorithm selection\"\n                                     name=\"documentAlgorithm\"\n                                     value={this.state.documentHashingAlgorithm}\n                                     onChange={this.handleChange}\n                        >\n                            <option value=\"SHA-256\">SHA-256 (recommended)</option>\n                            <option value=\"SHA-1\">SHA-1</option>\n                            <option value=\"SHA-384\">SHA-384</option>\n                            <option value=\"SHA-512\">SHA-512</option>\n                            <option value=\"MD5\">MD5</option>\n                            <option value=\"KECCAK-256\">Keccak-256</option>\n                            <option value=\"KECCAK-384\">Keccak-384</option>\n                            <option value=\"KECCAK-512\">Keccak-512</option>\n                        </Form.Select>\n                        <Form.Text className=\"text-custom-info\">\n                            Choose the algorithm you file is hashed with to help it's later verification.\n                        </Form.Text>\n                    </Form.Group>\n                    <Button variant=\"success\" type=\"submit\" className=\"mt-2\" disabled={!this.state.documentHash}>\n                        Add document hash\n                    </Button>\n                </Form>\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { Alert, Button, Form } from \"react-bootstrap\";\n\nexport class ManageDocument extends Component {\n    state = {\n        documentHash: '',\n        signatoryAddress: '',\n        signatoryName: '',\n        signatoryDescription: '',\n        amountToBePaid: 0,\n        documentActionSuccessful: false,\n        showError: false,\n        errorMessage: '',\n    };\n    documentSignerService = null;\n\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.documentSignerService = props.data.documentSignerService;\n    }\n\n    handleChange(e) {\n        this.setState({[e.target.name]: e.target.value});\n    }\n\n    addSignatory = async (e) => {\n        e.preventDefault();\n        this.setState({\n            showError: false\n        })\n\n        try {\n            await this.documentSignerService.addSignatory(\n                this.state.documentHash,\n                this.state.signatoryAddress,\n                this.state.signatoryName,\n                this.state.signatoryDescription,\n                this.state.amountToBePaid\n            );\n            this.setState({\n                signatoryAddress: '',\n                signatoryName: '',\n                signatoryDescription: '',\n                documentActionSuccessful: true\n            })\n\n            setInterval(() => {\n                this.setState({\n                    documentActionSuccessful: false\n                })\n            }, 3000)\n        } catch (error) {\n            console.log(error);\n            const errorMessage = error.message;\n            this.setState({\n                showError: true,\n                errorMessage: errorMessage\n            })\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"d-flex justify-content-center align-content-center align-items-center flex-column\">\n                {this.state.documentActionSuccessful === true ?\n                    (<Alert variant={\"success\"}>\n                        Document action executed successfully!\n                    </Alert>) : null\n                }\n                {this.state.showError === true ?\n                    (<Alert variant={\"danger\"}>\n                        <h6>Error occurred while trying to perform action over document.</h6>\n                        <p>{this.state.errorMessage}</p>\n                    </Alert>) : null\n                }\n                <Form className=\"mt-2\">\n                    <Form.Group className=\"mb-3\" controlId=\"formDocumentHash\">\n                        <Form.Label>Document hash</Form.Label>\n                        <Form.Control type=\"text\"\n                                      placeholder=\"Paste your document hash here\"\n                                      name=\"documentHash\"\n                                      value={this.state.documentHash}\n                                      onChange={this.handleChange}\n                                      className=\"document-hash-input\"\n                        />\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\" controlId=\"formSignatoryAddress\">\n                        <Form.Label>Signatory address</Form.Label>\n                        <Form.Control type=\"text\"\n                                      placeholder=\"Paste signatory address here\"\n                                      name=\"signatoryAddress\"\n                                      value={this.state.signatoryAddress}\n                                      onChange={this.handleChange}\n                                      className=\"document-hash-input\"\n                        />\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\" controlId=\"formSignatoryName\">\n                        <Form.Label>Signatory name</Form.Label>\n                        <Form.Control type=\"text\"\n                                      placeholder=\"Enter signatory full name\"\n                                      name=\"signatoryName\"\n                                      value={this.state.signatoryName}\n                                      onChange={this.handleChange}\n                                      className=\"document-hash-input\"\n                        />\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\" controlId=\"formSignatoryDescription\">\n                        <Form.Label>Signatory description</Form.Label>\n                        <Form.Control type=\"text\"\n                                      placeholder=\"Enter signatory description or signing reason\"\n                                      name=\"signatoryDescription\"\n                                      value={this.state.signatoryDescription}\n                                      onChange={this.handleChange}\n                                      className=\"document-hash-input\"\n                        />\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\" controlId=\"formSignatoryAmount\">\n                        <Form.Label>Amount of ETH to send</Form.Label>\n                        <Form.Control type=\"text\"\n                                      placeholder=\"Enter the amount of ETH to be sent to the contract.\"\n                                      name=\"amountToBePaid\"\n                                      value={this.state.amountToBePaid}\n                                      onChange={this.handleChange}\n                                      className=\"document-hash-input\"\n                        />\n                        <Form.Text className=\"text-custom-info\">\n                            Once signatory sign the document, the amount will be transferred to their account.\n                        </Form.Text>\n                    </Form.Group>\n                    <Button variant=\"success\"\n                            type=\"button\"\n                            onClick={this.addSignatory}\n                            disabled={!this.state.documentHash || !this.state.signatoryAddress}\n                    >\n                        Add Signatory\n                    </Button>\n                </Form>\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport {Alert, Button, Form} from \"react-bootstrap\";\n\nexport class SignDocument extends Component {\n    state = {\n        documentHash: '',\n        documentName: '',\n        documentDescription: '',\n        documentActionSuccessful: false,\n        showError: false,\n        errorMessage: '',\n    };\n    documentSignerService = null;\n\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.documentSignerService = props.data.documentSignerService;\n    }\n\n    handleChange(e) {\n        this.setState({[e.target.name]: e.target.value});\n    }\n\n    signDocument = async (e) => {\n        // Reset potential errors\n        this.setState({\n            showError: false,\n            errorMessage: ''\n        })\n\n        // Get signatories to see if the user is allowed to sign the specified document\n        let allowedToSign = false;\n        try {\n            const signatories = await this.documentSignerService.getSignatories(this.state.documentHash);\n            const currentAccount = await this.documentSignerService.getAccountAddress();\n            allowedToSign = signatories.includes(currentAccount);\n        } catch (error) {\n            const errorMessage = error.message;\n            this.setState({\n                showError: true,\n                errorMessage: errorMessage\n            })\n        }\n\n        if (allowedToSign) {\n            try {\n                await this.documentSignerService.signDocument(this.state.documentHash);\n\n                this.setState({\n                    documentActionSuccessful: true\n                })\n\n                setInterval(() => {\n                    this.setState({\n                        documentActionSuccessful: false\n                    })\n                }, 3000)\n            } catch (error) {\n                console.log(error);\n                const errorMessage = error.message;\n                this.setState({\n                    showError: true,\n                    errorMessage: errorMessage\n                })\n            }\n        } else {\n            const errorMessage = 'Your account is not in signatory list. You are not allowed to sign this document.';\n            this.setState({\n                showError: true,\n                errorMessage: errorMessage\n            })\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"d-flex justify-content-center align-content-center align-items-center flex-column\">\n                {this.state.documentActionSuccessful === true ?\n                    (<Alert variant={\"success\"}>\n                        Document signed successfully!\n                    </Alert>) : null\n                }\n                {this.state.showError === true ?\n                    (<Alert variant={\"danger\"}>\n                        <h6>Error occurred while trying to perform action over document.</h6>\n                        <p>{this.state.errorMessage}</p>\n                    </Alert>) : null\n                }\n                <Form className=\"mt-2\" onSubmit={this.getDocument}>\n                    <Form.Group className=\"mb-3\" controlId=\"formDocumentHash\">\n                        <Form.Label>Document hash</Form.Label>\n                        <Form.Control type=\"text\"\n                                      placeholder=\"Paste your document hash here\"\n                                      name=\"documentHash\"\n                                      value={this.state.documentHash}\n                                      onChange={this.handleChange}\n                                      className=\"document-hash-input\"\n                        />\n                    </Form.Group>\n                    <Button variant=\"success\"\n                            type=\"button\"\n                            onClick={this.signDocument}\n                            disabled={!this.state.documentHash}>\n                        Sign Document\n                    </Button>\n                </Form>\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { Alert, Button, Form, Table } from \"react-bootstrap\";\n\nexport class GetDocument extends Component {\n    state = {\n        documentHash: '',\n        documentName: '',\n        documentDescription: '',\n        documentOwner: '',\n        documentHashingAlgorithm: '',\n        documentTimestamp: '',\n        documentSignatories: [],\n        documentSignatures: [],\n        documentRetrieved: false,\n        signatoriesRetrieved: false,\n        signaturesRetrieved: false,\n        showError: false,\n        errorMessage: '',\n        documentDoesNotExist: false\n    };\n    documentSignerService = null;\n\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.documentSignerService = props.data.documentSignerService;\n    }\n\n    handleChange(e) {\n        this.setState({\n            [e.target.name]: e.target.value,\n            documentRetrieved: false,\n            signatoriesRetrieved: false,\n            signaturesRetrieved: false,\n            documentSignatories: [],\n            documentSignatures: []\n        });\n    }\n\n    getDocument = async (e) => {\n        e.preventDefault();\n\n        // Reset initial states\n        this.setState({\n            documentName: '',\n            documentDescription: '',\n            documentOwner: '',\n            documentHashingAlgorithm: '',\n            documentTimestamp: '',\n            documentRetrieved: false,\n            signatoriesRetrieved: false,\n            documentSignatories: [],\n            signaturesRetrieved: false,\n            documentSignatures: [],\n            documentDoesNotExist: false\n        })\n\n        const document = await this.documentSignerService.getDocument(this.state.documentHash);\n\n        console.log(document);\n\n        if (document && document.owner === '0x0000000000000000000000000000000000000000') {\n            this.setState({\n                documentDoesNotExist: true\n            })\n            return null;\n        }\n\n        // Manage timestamp\n        const dateFormatted = this.getFormattedDateFromTimestamp(document.createdAt);\n\n        this.setState({\n            documentName: document.name,\n            documentDescription: document.description,\n            documentOwner: document.owner,\n            documentHashingAlgorithm: document.algorithm,\n            documentTimestamp: dateFormatted,\n            documentRetrieved: true\n        })\n\n        const signatories = await this.documentSignerService.getSignatories(this.state.documentHash);\n        const signatoriesWithInfo = [];\n        for (let signatory of signatories) {\n            const signatoryInfo = await this.documentSignerService\n                .getSignatoryInformation(this.state.documentHash, signatory)\n            const amountToBePaidInETH = this.documentSignerService.web3.utils.fromWei(signatoryInfo[3]);\n            signatoriesWithInfo.push({\n                address: signatory,\n                name: signatoryInfo[0],\n                description: signatoryInfo[1],\n                signedAt: signatoryInfo[2],\n                amountToBePaid: amountToBePaidInETH,\n                paid: signatoryInfo[4],\n            });\n        }\n        console.log(signatoriesWithInfo)\n\n        this.setState({\n            signatoriesRetrieved: true,\n            documentSignatories: signatoriesWithInfo\n        })\n\n        const signatures = await this.documentSignerService.getSignatures(this.state.documentHash);\n        this.setState({\n            signaturesRetrieved: true,\n            documentSignatures: signatures\n        })\n    }\n\n    getFormattedDateFromTimestamp(timestamp) {\n        const dateCreated = new Date(timestamp * 1000);\n        const time = dateCreated.getHours() + ':' + dateCreated.getMinutes();\n        return dateCreated.toLocaleDateString(\"en-US\") + ' - ' + time + 'h';\n    }\n\n    showSignatories = () => {\n        let indexKey = 0;\n\n        return this.state.documentSignatories.map(s => {\n            indexKey++;\n            return (<tr key={ s + indexKey }>\n                <td>{ s.name }</td>\n                <td>{ s.description }</td>\n                <td>{ s.address }</td>\n                <td>{ s.amountToBePaid } ETH</td>\n                <td>{ s.paid === true ? 'Yes' : 'No' }</td>\n            </tr>)\n        });\n    }\n\n    showSignatures = () => {\n        let indexKey = 0;\n\n        return this.state.documentSignatures.map(s => {\n            if (s !== '0x0000000000000000000000000000000000000000') {\n                indexKey++;\n                const signatoryInfo = this.state.documentSignatories.find(signatory => signatory.address === s);\n\n                return (<tr key={ s + indexKey }>\n                    <td>{ signatoryInfo.name }</td>\n                    <td>{ signatoryInfo.description }</td>\n                    <td>{ s }</td>\n                    <td>{ this.getFormattedDateFromTimestamp(signatoryInfo.signedAt) }</td>\n                </tr>)\n            } else {\n                console.log('Show signatures: Skipping 0x0000000000000000000000000000000000000000 address.');\n            }\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"d-flex justify-content-center align-content-center align-items-center flex-column\">\n                {this.state.showError === true ?\n                    (<Alert variant={\"danger\"}>\n                        <h6>Error occurred while trying to get document information.</h6>\n                        <p>{this.state.errorMessage}</p>\n                    </Alert>) : null\n                }\n                {this.state.documentDoesNotExist === true ?\n                    (<Alert variant={\"danger\"}>\n                        <h6>Requested document does not exist!</h6>\n                        <p>Check the document hash you've entered and try again.</p>\n                    </Alert>) : null\n                }\n                <Form className=\"mt-2\" onSubmit={this.getDocument}>\n                    <Form.Group className=\"mb-3\" controlId=\"formDocumentHash\">\n                        <Form.Label>Document hash</Form.Label>\n                        <Form.Control type=\"text\"\n                                      placeholder=\"Paste your document hash here\"\n                                      name=\"documentHash\"\n                                      value={this.state.documentHash}\n                                      onChange={this.handleChange}\n                                      className=\"document-hash-input\"\n                        />\n                    </Form.Group>\n                    <Button variant=\"success\" type=\"submit\" disabled={!this.state.documentHash}>\n                        Get document info\n                    </Button>\n                </Form>\n                {this.state.documentRetrieved ? (<h3 className=\"mt-4\">Basic document information</h3>) : null }\n                {this.state.documentRetrieved === true ?\n                    (<Table striped bordered hover variant=\"dark\" className=\"mt-2\">\n                        <tbody>\n                        <tr>\n                            <td className=\"dark-color\"><b>Hash</b></td>\n                            <td>{this.state.documentHash}</td>\n                        </tr>\n                        <tr>\n                            <td className=\"dark-color\"><b>Name</b></td>\n                            <td>{this.state.documentName}</td>\n                        </tr>\n                        <tr>\n                            <td className=\"dark-color\"><b>Description</b></td>\n                            <td>{this.state.documentDescription}</td>\n                        </tr>\n                        <tr>\n                            <td className=\"dark-color\"><b>Owner address</b></td>\n                            <td>{this.state.documentOwner}</td>\n                        </tr>\n                        <tr>\n                            <td className=\"dark-color\"><b>Hashing algorithm</b></td>\n                            <td>{this.state.documentHashingAlgorithm}</td>\n                        </tr>\n                        <tr>\n                            <td className=\"dark-color\"><b>Created at</b></td>\n                            <td>{this.state.documentTimestamp}</td>\n                        </tr>\n                        </tbody>\n                    </Table>) : null\n                }\n                {\n                    this.state.documentSignatories && (this.state.documentSignatories.length > 0) ?\n                        <h4 className=\"mt-2\">Added signatories</h4>\n                        : null\n                }\n                { this.state.signatoriesRetrieved && (this.state.documentSignatories.length > 0) ?\n                    (<Table striped bordered hover variant=\"dark\" className=\"mt-2\">\n                        <thead>\n                        <tr>\n                            <th>Signatory name</th>\n                            <th>Signatory description</th>\n                            <th>Signatory address</th>\n                            <th>Amount to be paid</th>\n                            <th>Paid</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        { this.showSignatories() }\n                        </tbody>\n                    </Table>) : null\n                }\n                {\n                    this.state.signaturesRetrieved && (this.state.documentSignatures.length > 0) ?\n                        <h4 className=\"mt-2\">Signatures</h4>\n                        : null\n                }\n                { this.state.signaturesRetrieved && (this.state.documentSignatures.length > 0) ?\n                        (<Table striped bordered hover variant=\"dark\" className=\"mt-2\">\n                            <thead>\n                                <tr>\n                                    <th>Signatory name</th>\n                                    <th>Signatory description</th>\n                                    <th>Signatory address</th>\n                                    <th>Signed at</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                            { this.showSignatures() }\n                            </tbody>\n                        </Table>) : null\n                }\n\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\n\nexport class About extends Component {\n    state = {};\n\n    render() {\n        return (\n            <div className=\"d-flex justify-content-center align-content-center align-items-center flex-column\">\n                <div className=\"about-page\">\n                    <h2>Introduction</h2>\n                    <p>\n                        Welcome to the blockchain document signer!\n                        This is decentralized application running on the Ethereum blockchain.\n                        This application is proof of concept which is a part of the Consensys Blockchain bootcamp.\n                    </p>\n                    <p>\n                        The purpose of this application is to enable multiple parties to add, sign and verify their documents\n                        on a blockchain without using third party services or centralized authorities as a source of trust.\n                    </p>\n                    <p>Use navigation in order to access different parts of application functionality.</p>\n                    <p>\n                        In order to start using the application you should connect your MetaMask wallet first!\n                        You can connect it immediately while opening this web application or by clicking on the green\n                        CONNECT button.\n                    </p>\n\n                    <h2>Adding documents</h2>\n                    <p>\n                        To add document you will need to generate its hash by using some of the methods mentioned on\n                        the page for adding documents.\n                    </p>\n                    <p>\n                        Document hash input is the main attribute that should be filled as it holds the integrity of\n                        your document and make it possible to identify and verify on a blockchain.\n                    </p>\n                    <p>\n                        Document name is the attribute that is arbitrary name used for easier understanding of which\n                        document it's all about. It will help in easier identification and history auditing of your\n                        documents.\n                    </p>\n                    <p>\n                        Document description is also arbitrary string that will describe your document.\n                        It serves the similar purpose as the document name.\n                    </p>\n                    <p>\n                        Algorithm used can be selected from the combobox list and it's purpose is to help with auditing\n                        and verifying documents. It will help you remember which algorithm you should use when you want\n                        to verify your document integrity if you only have hash of it. By running document hashing\n                        process again, you will be able to determine if it's the same one like on the blockchain.\n                    </p>\n                    <p>\n                        Once document is added, you will be able to use it within the rest of three available features\n                        (manage, sign and get its information).\n                    </p>\n\n                    <h2>Managing documents</h2>\n                    <p>\n                        This feature is used for adding signatories to the document. When you add signatory to your\n                        document, they will be able to sign it.\n                    </p>\n                    <p>Only document owner can add (allow) signatory to sign specific document.</p>\n                    <p>\n                        When adding a signatory you can specify the amount of ETH you want to pay to the signatory\n                        when they sign the proposed document.\n                    </p>\n\n                    <h2>Signing documents</h2>\n                    <p>\n                        If you are allowed to sign the specific document you can use this page to do so.\n                        Just enter the document hash and click Sign button.\n                    </p>\n                    <p>\n                        If a document owner provided some ETH for your signature, you'll receive it immediately after\n                        you sign.\n                    </p>\n                    <p>Once signed, documents cannot be signed again.</p>\n\n                    <h2>Getting document information</h2>\n                    <p>\n                        On this page you can enter the document hash and click on the available button in order to get\n                        information about the document.\n                    </p>\n                    <p>\n                        If a document contains signatories and signatures, they will appear on the screen.\n                        If not, these information will be omitted.\n                    </p>\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport DocumentSignerContract from \"./contracts/DocumentSigner.json\";\nimport { getWeb3, getWeb3Directly } from \"./getWeb3\";\n\nimport \"./App.css\";\nimport { contractAddress } from \"./contract_address.json\";\nimport { Button, Container, Nav } from \"react-bootstrap\";\nimport { DocumentSignerService } from \"./util/DocumentSignerService\";\nimport { AddDocumentByHash } from \"./components/AddDocumentByHash\";\nimport { ManageDocument } from \"./components/ManageDocument\";\nimport { SignDocument } from \"./components/SignDocument\";\nimport { GetDocument } from \"./components/GetDocument\";\nimport { About } from \"./components/About\";\n\nclass App extends Component {\n  pages = null;\n  state = {\n    web3: null,\n    accounts: null,\n    contract: null,\n    documentSignerService: null,\n    currentPage: 'addDocument'\n  };\n\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleNavChange = this.handleNavChange.bind(this);\n    this.pages = {\n      addDocument: React.createRef(),\n      manageDocument: React.createRef(),\n      signDocument: React.createRef(),\n      getDocument: React.createRef(),\n      about: React.createRef()\n    }\n  }\n\n  componentDidMount = async () => {\n    await this.connect();\n  };\n\n  async connect(connectingWithButton) {\n    console.log('Connecting...');\n    try {\n      // Get network provider and web3 instance.\n      let web3;\n      if (connectingWithButton) {\n        web3 = await getWeb3Directly();\n      } else {\n        web3 = await getWeb3();\n      }\n\n      // Get the contract instance.\n      // const networkId = await web3.eth.net.getId();\n      // const deployedNetwork = DocumentSignerContract.networks[networkId];\n      const instance = new web3.eth.Contract(DocumentSignerContract.abi, contractAddress);\n      instance.options.address = contractAddress;\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Instantiate document signer service\n      const documentSignerService = new DocumentSignerService(web3, instance, accounts);\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, contract: instance, accounts, documentSignerService });\n\n      // detect Metamask account change\n      window.ethereum.on('accountsChanged', async (accounts) => {\n        await this.state.documentSignerService.accountChanged();\n        this.setState({ accounts });\n      });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n          `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n\n  async connectWithButton() {\n    await this.connect(true);\n  }\n\n  handleChange(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  handleNavChange(e) {\n    this.pages.addDocument.current.className = 'nav-link';\n    this.pages.manageDocument.current.className = 'nav-link';\n    this.pages.signDocument.current.className = 'nav-link';\n    this.pages.getDocument.current.className = 'nav-link';\n    this.pages.about.current.className = 'nav-link';\n    e.target.className = 'nav-link nav-active';\n    this.setState({ currentPage: e.target.name });\n  }\n\n  isConnected() {\n    return !!(this.state.accounts && this.state.accounts.length > 0);\n  }\n\n  render() {\n    if (!this.isConnected()) {\n      return (\n          <div className=\"App\">\n            <Container fluid>\n              <div className=\"d-flex justify-content-center align-content-center align-items-center flex-column pb-4\">\n                <h2 className=\"mb-2 mt-4\">To begin, connect your wallet!</h2>\n                <Button variant=\"success\"\n                        size=\"lg\"\n                        type=\"button\"\n                        className=\"mt-3\"\n                        onClick={ this.connectWithButton.bind(this) }>\n                  Connect\n                </Button>\n              </div>\n            </Container>\n          </div>\n      );\n    }\n    return (\n      <div className=\"App\">\n        <Container fluid>\n          <img src=\"logo.png\" alt=\"Logo\" className=\"logo mt-4 mb-2\" />\n          {this.state.accounts && this.state.accounts.length > 0 ?\n            <p className=\"mt-2 mb-2\">Connected with account: <b>{ this.state.accounts[0] }</b> </p> : null\n          }\n          <Nav className=\"justify-content-center mt-3 mb-3 text-light\">\n            <Nav.Item>\n              <Nav.Link onClick={this.handleNavChange} ref={this.pages.addDocument} name=\"addDocument\" className=\"nav-active\">\n                Add Document\n              </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link onClick={this.handleNavChange} ref={this.pages.manageDocument} name=\"manageDocument\">\n                Manage Document\n              </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link onClick={this.handleNavChange} ref={this.pages.signDocument} name=\"signDocument\">\n                Sign Document\n              </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link onClick={this.handleNavChange} ref={this.pages.getDocument} name=\"getDocument\">\n                Document Information\n              </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link onClick={this.handleNavChange} ref={this.pages.about} name=\"about\">\n                About\n              </Nav.Link>\n            </Nav.Item>\n          </Nav>\n          <div className=\"d-flex justify-content-center align-content-center align-items-center flex-column pb-4\">\n            {this.state.currentPage === 'addDocument' ?\n              <AddDocumentByHash data={{documentSignerService: this.state.documentSignerService}}/> : null\n            }\n            {this.state.currentPage === 'manageDocument' ?\n                <ManageDocument data={{documentSignerService: this.state.documentSignerService}}/> : null\n            }\n            {this.state.currentPage === 'signDocument' ?\n                <SignDocument data={{documentSignerService: this.state.documentSignerService}}/> : null\n            }\n            {this.state.currentPage === 'getDocument' ?\n                <GetDocument data={{documentSignerService: this.state.documentSignerService}}/> : null\n            }\n            {this.state.currentPage === 'about' ?\n                <About data={{documentSignerService: this.state.documentSignerService}}/> : null\n            }\n          </div>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nconst getWeb3Directly = () =>\n    new Promise(async (resolve, reject) => {\n        // Modern dapp browsers...\n        if (window.ethereum) {\n          const web3 = new Web3(window.ethereum);\n          try {\n            // Request account access if needed\n            await window.ethereum.enable();\n            // Accounts now exposed\n            resolve(web3);\n          } catch (error) {\n            reject(error);\n          }\n        }\n        // Legacy dapp browsers...\n        else if (window.web3) {\n          // Use Mist/MetaMask's provider.\n          const web3 = window.web3;\n          console.log(\"Injected web3 detected.\");\n          resolve(web3);\n        }\n        // Fallback to localhost; use dev console port by default...\n        else {\n          const provider = new Web3.providers.HttpProvider(\n              \"http://127.0.0.1:8545\"\n          );\n          const web3 = new Web3(provider);\n          console.log(\"No web3 instance injected, using Local web3.\");\n          resolve(web3);\n        }\n    });\n\nexport { getWeb3, getWeb3Directly };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}